--lpm_decode DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_k27
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode2196w[1..0]	: WIRE;
	w_anode2205w[3..0]	: WIRE;
	w_anode2222w[3..0]	: WIRE;
	w_anode2232w[3..0]	: WIRE;
	w_anode2242w[3..0]	: WIRE;
	w_anode2252w[3..0]	: WIRE;
	w_anode2262w[3..0]	: WIRE;
	w_anode2272w[3..0]	: WIRE;
	w_anode2282w[3..0]	: WIRE;
	w_anode2294w[1..0]	: WIRE;
	w_anode2301w[3..0]	: WIRE;
	w_anode2312w[3..0]	: WIRE;
	w_anode2322w[3..0]	: WIRE;
	w_anode2332w[3..0]	: WIRE;
	w_anode2342w[3..0]	: WIRE;
	w_anode2352w[3..0]	: WIRE;
	w_anode2362w[3..0]	: WIRE;
	w_anode2372w[3..0]	: WIRE;
	w_data2194w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode2372w[3..3], w_anode2362w[3..3], w_anode2352w[3..3], w_anode2342w[3..3], w_anode2332w[3..3], w_anode2322w[3..3], w_anode2312w[3..3], w_anode2301w[3..3]), ( w_anode2282w[3..3], w_anode2272w[3..3], w_anode2262w[3..3], w_anode2252w[3..3], w_anode2242w[3..3], w_anode2232w[3..3], w_anode2222w[3..3], w_anode2205w[3..3]));
	w_anode2196w[] = ( (w_anode2196w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode2205w[] = ( (w_anode2205w[2..2] & (! w_data2194w[2..2])), (w_anode2205w[1..1] & (! w_data2194w[1..1])), (w_anode2205w[0..0] & (! w_data2194w[0..0])), w_anode2196w[1..1]);
	w_anode2222w[] = ( (w_anode2222w[2..2] & (! w_data2194w[2..2])), (w_anode2222w[1..1] & (! w_data2194w[1..1])), (w_anode2222w[0..0] & w_data2194w[0..0]), w_anode2196w[1..1]);
	w_anode2232w[] = ( (w_anode2232w[2..2] & (! w_data2194w[2..2])), (w_anode2232w[1..1] & w_data2194w[1..1]), (w_anode2232w[0..0] & (! w_data2194w[0..0])), w_anode2196w[1..1]);
	w_anode2242w[] = ( (w_anode2242w[2..2] & (! w_data2194w[2..2])), (w_anode2242w[1..1] & w_data2194w[1..1]), (w_anode2242w[0..0] & w_data2194w[0..0]), w_anode2196w[1..1]);
	w_anode2252w[] = ( (w_anode2252w[2..2] & w_data2194w[2..2]), (w_anode2252w[1..1] & (! w_data2194w[1..1])), (w_anode2252w[0..0] & (! w_data2194w[0..0])), w_anode2196w[1..1]);
	w_anode2262w[] = ( (w_anode2262w[2..2] & w_data2194w[2..2]), (w_anode2262w[1..1] & (! w_data2194w[1..1])), (w_anode2262w[0..0] & w_data2194w[0..0]), w_anode2196w[1..1]);
	w_anode2272w[] = ( (w_anode2272w[2..2] & w_data2194w[2..2]), (w_anode2272w[1..1] & w_data2194w[1..1]), (w_anode2272w[0..0] & (! w_data2194w[0..0])), w_anode2196w[1..1]);
	w_anode2282w[] = ( (w_anode2282w[2..2] & w_data2194w[2..2]), (w_anode2282w[1..1] & w_data2194w[1..1]), (w_anode2282w[0..0] & w_data2194w[0..0]), w_anode2196w[1..1]);
	w_anode2294w[] = ( (w_anode2294w[0..0] & data_wire[3..3]), enable_wire);
	w_anode2301w[] = ( (w_anode2301w[2..2] & (! w_data2194w[2..2])), (w_anode2301w[1..1] & (! w_data2194w[1..1])), (w_anode2301w[0..0] & (! w_data2194w[0..0])), w_anode2294w[1..1]);
	w_anode2312w[] = ( (w_anode2312w[2..2] & (! w_data2194w[2..2])), (w_anode2312w[1..1] & (! w_data2194w[1..1])), (w_anode2312w[0..0] & w_data2194w[0..0]), w_anode2294w[1..1]);
	w_anode2322w[] = ( (w_anode2322w[2..2] & (! w_data2194w[2..2])), (w_anode2322w[1..1] & w_data2194w[1..1]), (w_anode2322w[0..0] & (! w_data2194w[0..0])), w_anode2294w[1..1]);
	w_anode2332w[] = ( (w_anode2332w[2..2] & (! w_data2194w[2..2])), (w_anode2332w[1..1] & w_data2194w[1..1]), (w_anode2332w[0..0] & w_data2194w[0..0]), w_anode2294w[1..1]);
	w_anode2342w[] = ( (w_anode2342w[2..2] & w_data2194w[2..2]), (w_anode2342w[1..1] & (! w_data2194w[1..1])), (w_anode2342w[0..0] & (! w_data2194w[0..0])), w_anode2294w[1..1]);
	w_anode2352w[] = ( (w_anode2352w[2..2] & w_data2194w[2..2]), (w_anode2352w[1..1] & (! w_data2194w[1..1])), (w_anode2352w[0..0] & w_data2194w[0..0]), w_anode2294w[1..1]);
	w_anode2362w[] = ( (w_anode2362w[2..2] & w_data2194w[2..2]), (w_anode2362w[1..1] & w_data2194w[1..1]), (w_anode2362w[0..0] & (! w_data2194w[0..0])), w_anode2294w[1..1]);
	w_anode2372w[] = ( (w_anode2372w[2..2] & w_data2194w[2..2]), (w_anode2372w[1..1] & w_data2194w[1..1]), (w_anode2372w[0..0] & w_data2194w[0..0]), w_anode2294w[1..1]);
	w_data2194w[2..0] = data_wire[2..0];
END;
--VALID FILE
